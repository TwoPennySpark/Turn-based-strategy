// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntwrkCmd.proto

#ifndef PROTOBUF_ntwrkCmd_2eproto__INCLUDED
#define PROTOBUF_ntwrkCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ntwrkCmd_2eproto();
void protobuf_AssignDesc_ntwrkCmd_2eproto();
void protobuf_ShutdownFile_ntwrkCmd_2eproto();

class inGameCmd;
class preGameCmd;

enum preGameCmd_preGameCmdTypes {
  preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_NONE = 0,
  preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_PLAYER_CONNECTED = 1,
  preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_PLAYER_DISCONNECTED = 2,
  preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_PLAYER_READY = 3,
  preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_START_GAME = 4
};
bool preGameCmd_preGameCmdTypes_IsValid(int value);
const preGameCmd_preGameCmdTypes preGameCmd_preGameCmdTypes_preGameCmdTypes_MIN = preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_NONE;
const preGameCmd_preGameCmdTypes preGameCmd_preGameCmdTypes_preGameCmdTypes_MAX = preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_START_GAME;
const int preGameCmd_preGameCmdTypes_preGameCmdTypes_ARRAYSIZE = preGameCmd_preGameCmdTypes_preGameCmdTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* preGameCmd_preGameCmdTypes_descriptor();
inline const ::std::string& preGameCmd_preGameCmdTypes_Name(preGameCmd_preGameCmdTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    preGameCmd_preGameCmdTypes_descriptor(), value);
}
inline bool preGameCmd_preGameCmdTypes_Parse(
    const ::std::string& name, preGameCmd_preGameCmdTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<preGameCmd_preGameCmdTypes>(
    preGameCmd_preGameCmdTypes_descriptor(), name, value);
}
enum inGameCmd_inGameCmdTypes {
  inGameCmd_inGameCmdTypes_INGAME_NW_CMD_NONE = 0,
  inGameCmd_inGameCmdTypes_INGAME_NW_CMD_PLAYER_RECONNECTED = 1,
  inGameCmd_inGameCmdTypes_INGAME_NW_CMD_PLAYER_DISCONNECTED = 2,
  inGameCmd_inGameCmdTypes_INGAME_NW_CMD_NEXT_TURN = 3,
  inGameCmd_inGameCmdTypes_INGAME_NW_CMD_MOVE_UNIT = 4,
  inGameCmd_inGameCmdTypes_INGAME_NW_CMD_ATTACK_UNIT = 5,
  inGameCmd_inGameCmdTypes_INGAME_NW_CMD_PLACE_UNIT = 6,
  inGameCmd_inGameCmdTypes_INGAME_NW_CMD_REMOVE_UNIT = 7
};
bool inGameCmd_inGameCmdTypes_IsValid(int value);
const inGameCmd_inGameCmdTypes inGameCmd_inGameCmdTypes_inGameCmdTypes_MIN = inGameCmd_inGameCmdTypes_INGAME_NW_CMD_NONE;
const inGameCmd_inGameCmdTypes inGameCmd_inGameCmdTypes_inGameCmdTypes_MAX = inGameCmd_inGameCmdTypes_INGAME_NW_CMD_REMOVE_UNIT;
const int inGameCmd_inGameCmdTypes_inGameCmdTypes_ARRAYSIZE = inGameCmd_inGameCmdTypes_inGameCmdTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* inGameCmd_inGameCmdTypes_descriptor();
inline const ::std::string& inGameCmd_inGameCmdTypes_Name(inGameCmd_inGameCmdTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    inGameCmd_inGameCmdTypes_descriptor(), value);
}
inline bool inGameCmd_inGameCmdTypes_Parse(
    const ::std::string& name, inGameCmd_inGameCmdTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<inGameCmd_inGameCmdTypes>(
    inGameCmd_inGameCmdTypes_descriptor(), name, value);
}
// ===================================================================

class preGameCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:preGameCmd) */ {
 public:
  preGameCmd();
  virtual ~preGameCmd();

  preGameCmd(const preGameCmd& from);

  inline preGameCmd& operator=(const preGameCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const preGameCmd& default_instance();

  void Swap(preGameCmd* other);

  // implements Message ----------------------------------------------

  inline preGameCmd* New() const { return New(NULL); }

  preGameCmd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const preGameCmd& from);
  void MergeFrom(const preGameCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(preGameCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef preGameCmd_preGameCmdTypes preGameCmdTypes;
  static const preGameCmdTypes PREGAME_NW_CMD_NONE =
    preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_NONE;
  static const preGameCmdTypes PREGAME_NW_CMD_PLAYER_CONNECTED =
    preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_PLAYER_CONNECTED;
  static const preGameCmdTypes PREGAME_NW_CMD_PLAYER_DISCONNECTED =
    preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_PLAYER_DISCONNECTED;
  static const preGameCmdTypes PREGAME_NW_CMD_PLAYER_READY =
    preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_PLAYER_READY;
  static const preGameCmdTypes PREGAME_NW_CMD_START_GAME =
    preGameCmd_preGameCmdTypes_PREGAME_NW_CMD_START_GAME;
  static inline bool preGameCmdTypes_IsValid(int value) {
    return preGameCmd_preGameCmdTypes_IsValid(value);
  }
  static const preGameCmdTypes preGameCmdTypes_MIN =
    preGameCmd_preGameCmdTypes_preGameCmdTypes_MIN;
  static const preGameCmdTypes preGameCmdTypes_MAX =
    preGameCmd_preGameCmdTypes_preGameCmdTypes_MAX;
  static const int preGameCmdTypes_ARRAYSIZE =
    preGameCmd_preGameCmdTypes_preGameCmdTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  preGameCmdTypes_descriptor() {
    return preGameCmd_preGameCmdTypes_descriptor();
  }
  static inline const ::std::string& preGameCmdTypes_Name(preGameCmdTypes value) {
    return preGameCmd_preGameCmdTypes_Name(value);
  }
  static inline bool preGameCmdTypes_Parse(const ::std::string& name,
      preGameCmdTypes* value) {
    return preGameCmd_preGameCmdTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required fixed32 type = 1 [default = 0];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional fixed32 indexNum = 3;
  bool has_indexnum() const;
  void clear_indexnum();
  static const int kIndexNumFieldNumber = 3;
  ::google::protobuf::uint32 indexnum() const;
  void set_indexnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:preGameCmd)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_indexnum();
  inline void clear_has_indexnum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 indexnum_;
  friend void  protobuf_AddDesc_ntwrkCmd_2eproto();
  friend void protobuf_AssignDesc_ntwrkCmd_2eproto();
  friend void protobuf_ShutdownFile_ntwrkCmd_2eproto();

  void InitAsDefaultInstance();
  static preGameCmd* default_instance_;
};
// -------------------------------------------------------------------

class inGameCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inGameCmd) */ {
 public:
  inGameCmd();
  virtual ~inGameCmd();

  inGameCmd(const inGameCmd& from);

  inline inGameCmd& operator=(const inGameCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const inGameCmd& default_instance();

  void Swap(inGameCmd* other);

  // implements Message ----------------------------------------------

  inline inGameCmd* New() const { return New(NULL); }

  inGameCmd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const inGameCmd& from);
  void MergeFrom(const inGameCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(inGameCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef inGameCmd_inGameCmdTypes inGameCmdTypes;
  static const inGameCmdTypes INGAME_NW_CMD_NONE =
    inGameCmd_inGameCmdTypes_INGAME_NW_CMD_NONE;
  static const inGameCmdTypes INGAME_NW_CMD_PLAYER_RECONNECTED =
    inGameCmd_inGameCmdTypes_INGAME_NW_CMD_PLAYER_RECONNECTED;
  static const inGameCmdTypes INGAME_NW_CMD_PLAYER_DISCONNECTED =
    inGameCmd_inGameCmdTypes_INGAME_NW_CMD_PLAYER_DISCONNECTED;
  static const inGameCmdTypes INGAME_NW_CMD_NEXT_TURN =
    inGameCmd_inGameCmdTypes_INGAME_NW_CMD_NEXT_TURN;
  static const inGameCmdTypes INGAME_NW_CMD_MOVE_UNIT =
    inGameCmd_inGameCmdTypes_INGAME_NW_CMD_MOVE_UNIT;
  static const inGameCmdTypes INGAME_NW_CMD_ATTACK_UNIT =
    inGameCmd_inGameCmdTypes_INGAME_NW_CMD_ATTACK_UNIT;
  static const inGameCmdTypes INGAME_NW_CMD_PLACE_UNIT =
    inGameCmd_inGameCmdTypes_INGAME_NW_CMD_PLACE_UNIT;
  static const inGameCmdTypes INGAME_NW_CMD_REMOVE_UNIT =
    inGameCmd_inGameCmdTypes_INGAME_NW_CMD_REMOVE_UNIT;
  static inline bool inGameCmdTypes_IsValid(int value) {
    return inGameCmd_inGameCmdTypes_IsValid(value);
  }
  static const inGameCmdTypes inGameCmdTypes_MIN =
    inGameCmd_inGameCmdTypes_inGameCmdTypes_MIN;
  static const inGameCmdTypes inGameCmdTypes_MAX =
    inGameCmd_inGameCmdTypes_inGameCmdTypes_MAX;
  static const int inGameCmdTypes_ARRAYSIZE =
    inGameCmd_inGameCmdTypes_inGameCmdTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  inGameCmdTypes_descriptor() {
    return inGameCmd_inGameCmdTypes_descriptor();
  }
  static inline const ::std::string& inGameCmdTypes_Name(inGameCmdTypes value) {
    return inGameCmd_inGameCmdTypes_Name(value);
  }
  static inline bool inGameCmdTypes_Parse(const ::std::string& name,
      inGameCmdTypes* value) {
    return inGameCmd_inGameCmdTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required fixed32 type = 1 [default = 0];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // repeated fixed32 args = 2;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  ::google::protobuf::uint32 args(int index) const;
  void set_args(int index, ::google::protobuf::uint32 value);
  void add_args(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      args() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_args();

  // @@protoc_insertion_point(class_scope:inGameCmd)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > args_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_ntwrkCmd_2eproto();
  friend void protobuf_AssignDesc_ntwrkCmd_2eproto();
  friend void protobuf_ShutdownFile_ntwrkCmd_2eproto();

  void InitAsDefaultInstance();
  static inGameCmd* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// preGameCmd

// required fixed32 type = 1 [default = 0];
inline bool preGameCmd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void preGameCmd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void preGameCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void preGameCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 preGameCmd::type() const {
  // @@protoc_insertion_point(field_get:preGameCmd.type)
  return type_;
}
inline void preGameCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:preGameCmd.type)
}

// optional string name = 2;
inline bool preGameCmd::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void preGameCmd::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void preGameCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void preGameCmd::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& preGameCmd::name() const {
  // @@protoc_insertion_point(field_get:preGameCmd.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void preGameCmd::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:preGameCmd.name)
}
inline void preGameCmd::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:preGameCmd.name)
}
inline void preGameCmd::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:preGameCmd.name)
}
inline ::std::string* preGameCmd::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:preGameCmd.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* preGameCmd::release_name() {
  // @@protoc_insertion_point(field_release:preGameCmd.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void preGameCmd::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:preGameCmd.name)
}

// optional fixed32 indexNum = 3;
inline bool preGameCmd::has_indexnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void preGameCmd::set_has_indexnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void preGameCmd::clear_has_indexnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void preGameCmd::clear_indexnum() {
  indexnum_ = 0u;
  clear_has_indexnum();
}
inline ::google::protobuf::uint32 preGameCmd::indexnum() const {
  // @@protoc_insertion_point(field_get:preGameCmd.indexNum)
  return indexnum_;
}
inline void preGameCmd::set_indexnum(::google::protobuf::uint32 value) {
  set_has_indexnum();
  indexnum_ = value;
  // @@protoc_insertion_point(field_set:preGameCmd.indexNum)
}

// -------------------------------------------------------------------

// inGameCmd

// required fixed32 type = 1 [default = 0];
inline bool inGameCmd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void inGameCmd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void inGameCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void inGameCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 inGameCmd::type() const {
  // @@protoc_insertion_point(field_get:inGameCmd.type)
  return type_;
}
inline void inGameCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:inGameCmd.type)
}

// repeated fixed32 args = 2;
inline int inGameCmd::args_size() const {
  return args_.size();
}
inline void inGameCmd::clear_args() {
  args_.Clear();
}
inline ::google::protobuf::uint32 inGameCmd::args(int index) const {
  // @@protoc_insertion_point(field_get:inGameCmd.args)
  return args_.Get(index);
}
inline void inGameCmd::set_args(int index, ::google::protobuf::uint32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:inGameCmd.args)
}
inline void inGameCmd::add_args(::google::protobuf::uint32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:inGameCmd.args)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
inGameCmd::args() const {
  // @@protoc_insertion_point(field_list:inGameCmd.args)
  return args_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
inGameCmd::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:inGameCmd.args)
  return &args_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::preGameCmd_preGameCmdTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::preGameCmd_preGameCmdTypes>() {
  return ::preGameCmd_preGameCmdTypes_descriptor();
}
template <> struct is_proto_enum< ::inGameCmd_inGameCmdTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inGameCmd_inGameCmdTypes>() {
  return ::inGameCmd_inGameCmdTypes_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ntwrkCmd_2eproto__INCLUDED
