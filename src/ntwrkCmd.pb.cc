// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntwrkCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ntwrkCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* preGameCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  preGameCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* preGameCmd_preGameCmdTypes_descriptor_ = NULL;
const ::google::protobuf::Descriptor* inGameCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  inGameCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* inGameCmd_inGameCmdTypes_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ntwrkCmd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ntwrkCmd_2eproto() {
  protobuf_AddDesc_ntwrkCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ntwrkCmd.proto");
  GOOGLE_CHECK(file != NULL);
  preGameCmd_descriptor_ = file->message_type(0);
  static const int preGameCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(preGameCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(preGameCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(preGameCmd, indexnum_),
  };
  preGameCmd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      preGameCmd_descriptor_,
      preGameCmd::default_instance_,
      preGameCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(preGameCmd, _has_bits_[0]),
      -1,
      -1,
      sizeof(preGameCmd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(preGameCmd, _internal_metadata_),
      -1);
  preGameCmd_preGameCmdTypes_descriptor_ = preGameCmd_descriptor_->enum_type(0);
  inGameCmd_descriptor_ = file->message_type(1);
  static const int inGameCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inGameCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inGameCmd, args_),
  };
  inGameCmd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      inGameCmd_descriptor_,
      inGameCmd::default_instance_,
      inGameCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inGameCmd, _has_bits_[0]),
      -1,
      -1,
      sizeof(inGameCmd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inGameCmd, _internal_metadata_),
      -1);
  inGameCmd_inGameCmdTypes_descriptor_ = inGameCmd_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ntwrkCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      preGameCmd_descriptor_, &preGameCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      inGameCmd_descriptor_, &inGameCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ntwrkCmd_2eproto() {
  delete preGameCmd::default_instance_;
  delete preGameCmd_reflection_;
  delete inGameCmd::default_instance_;
  delete inGameCmd_reflection_;
}

void protobuf_AddDesc_ntwrkCmd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ntwrkCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ntwrkCmd.proto\"\367\001\n\npreGameCmd\022\017\n\004type\030"
    "\001 \002(\007:\0010\022\014\n\004name\030\002 \001(\t\022\020\n\010indexNum\030\003 \001(\007"
    "\"\267\001\n\017preGameCmdTypes\022\027\n\023PREGAME_NW_CMD_N"
    "ONE\020\000\022#\n\037PREGAME_NW_CMD_PLAYER_CONNECTED"
    "\020\001\022&\n\"PREGAME_NW_CMD_PLAYER_DISCONNECTED"
    "\020\002\022\037\n\033PREGAME_NW_CMD_PLAYER_READY\020\003\022\035\n\031P"
    "REGAME_NW_CMD_START_GAME\020\004\"\270\002\n\tinGameCmd"
    "\022\017\n\004type\030\001 \002(\007:\0010\022\014\n\004args\030\002 \003(\007\"\213\002\n\016inGa"
    "meCmdTypes\022\026\n\022INGAME_NW_CMD_NONE\020\000\022$\n IN"
    "GAME_NW_CMD_PLAYER_RECONNECTED\020\001\022%\n!INGA"
    "ME_NW_CMD_PLAYER_DISCONNECTED\020\002\022\033\n\027INGAM"
    "E_NW_CMD_NEXT_TURN\020\003\022\033\n\027INGAME_NW_CMD_MO"
    "VE_UNIT\020\004\022\035\n\031INGAME_NW_CMD_ATTACK_UNIT\020\005"
    "\022\034\n\030INGAME_NW_CMD_PLACE_UNIT\020\006\022\035\n\031INGAME"
    "_NW_CMD_REMOVE_UNIT\020\007", 581);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ntwrkCmd.proto", &protobuf_RegisterTypes);
  preGameCmd::default_instance_ = new preGameCmd();
  inGameCmd::default_instance_ = new inGameCmd();
  preGameCmd::default_instance_->InitAsDefaultInstance();
  inGameCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ntwrkCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ntwrkCmd_2eproto {
  StaticDescriptorInitializer_ntwrkCmd_2eproto() {
    protobuf_AddDesc_ntwrkCmd_2eproto();
  }
} static_descriptor_initializer_ntwrkCmd_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* preGameCmd_preGameCmdTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return preGameCmd_preGameCmdTypes_descriptor_;
}
bool preGameCmd_preGameCmdTypes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const preGameCmd_preGameCmdTypes preGameCmd::PREGAME_NW_CMD_NONE;
const preGameCmd_preGameCmdTypes preGameCmd::PREGAME_NW_CMD_PLAYER_CONNECTED;
const preGameCmd_preGameCmdTypes preGameCmd::PREGAME_NW_CMD_PLAYER_DISCONNECTED;
const preGameCmd_preGameCmdTypes preGameCmd::PREGAME_NW_CMD_PLAYER_READY;
const preGameCmd_preGameCmdTypes preGameCmd::PREGAME_NW_CMD_START_GAME;
const preGameCmd_preGameCmdTypes preGameCmd::preGameCmdTypes_MIN;
const preGameCmd_preGameCmdTypes preGameCmd::preGameCmdTypes_MAX;
const int preGameCmd::preGameCmdTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int preGameCmd::kTypeFieldNumber;
const int preGameCmd::kNameFieldNumber;
const int preGameCmd::kIndexNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

preGameCmd::preGameCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:preGameCmd)
}

void preGameCmd::InitAsDefaultInstance() {
}

preGameCmd::preGameCmd(const preGameCmd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:preGameCmd)
}

void preGameCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indexnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

preGameCmd::~preGameCmd() {
  // @@protoc_insertion_point(destructor:preGameCmd)
  SharedDtor();
}

void preGameCmd::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void preGameCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* preGameCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return preGameCmd_descriptor_;
}

const preGameCmd& preGameCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ntwrkCmd_2eproto();
  return *default_instance_;
}

preGameCmd* preGameCmd::default_instance_ = NULL;

preGameCmd* preGameCmd::New(::google::protobuf::Arena* arena) const {
  preGameCmd* n = new preGameCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void preGameCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:preGameCmd)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(preGameCmd, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<preGameCmd*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(type_, indexnum_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool preGameCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:preGameCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 type = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preGameCmd.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_indexNum;
        break;
      }

      // optional fixed32 indexNum = 3;
      case 3: {
        if (tag == 29) {
         parse_indexNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &indexnum_)));
          set_has_indexnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:preGameCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:preGameCmd)
  return false;
#undef DO_
}

void preGameCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:preGameCmd)
  // required fixed32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preGameCmd.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional fixed32 indexNum = 3;
  if (has_indexnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->indexnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:preGameCmd)
}

::google::protobuf::uint8* preGameCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:preGameCmd)
  // required fixed32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preGameCmd.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional fixed32 indexNum = 3;
  if (has_indexnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->indexnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:preGameCmd)
  return target;
}

int preGameCmd::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:preGameCmd)
  int total_size = 0;

  // required fixed32 type = 1 [default = 0];
  if (has_type()) {
    total_size += 1 + 4;
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 indexNum = 3;
    if (has_indexnum()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void preGameCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:preGameCmd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const preGameCmd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const preGameCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:preGameCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:preGameCmd)
    MergeFrom(*source);
  }
}

void preGameCmd::MergeFrom(const preGameCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:preGameCmd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_indexnum()) {
      set_indexnum(from.indexnum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void preGameCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:preGameCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void preGameCmd::CopyFrom(const preGameCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:preGameCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool preGameCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void preGameCmd::Swap(preGameCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void preGameCmd::InternalSwap(preGameCmd* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(indexnum_, other->indexnum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata preGameCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = preGameCmd_descriptor_;
  metadata.reflection = preGameCmd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// preGameCmd

// required fixed32 type = 1 [default = 0];
bool preGameCmd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void preGameCmd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void preGameCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void preGameCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 preGameCmd::type() const {
  // @@protoc_insertion_point(field_get:preGameCmd.type)
  return type_;
}
 void preGameCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:preGameCmd.type)
}

// optional string name = 2;
bool preGameCmd::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void preGameCmd::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void preGameCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void preGameCmd::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& preGameCmd::name() const {
  // @@protoc_insertion_point(field_get:preGameCmd.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void preGameCmd::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:preGameCmd.name)
}
 void preGameCmd::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:preGameCmd.name)
}
 void preGameCmd::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:preGameCmd.name)
}
 ::std::string* preGameCmd::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:preGameCmd.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* preGameCmd::release_name() {
  // @@protoc_insertion_point(field_release:preGameCmd.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void preGameCmd::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:preGameCmd.name)
}

// optional fixed32 indexNum = 3;
bool preGameCmd::has_indexnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void preGameCmd::set_has_indexnum() {
  _has_bits_[0] |= 0x00000004u;
}
void preGameCmd::clear_has_indexnum() {
  _has_bits_[0] &= ~0x00000004u;
}
void preGameCmd::clear_indexnum() {
  indexnum_ = 0u;
  clear_has_indexnum();
}
 ::google::protobuf::uint32 preGameCmd::indexnum() const {
  // @@protoc_insertion_point(field_get:preGameCmd.indexNum)
  return indexnum_;
}
 void preGameCmd::set_indexnum(::google::protobuf::uint32 value) {
  set_has_indexnum();
  indexnum_ = value;
  // @@protoc_insertion_point(field_set:preGameCmd.indexNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* inGameCmd_inGameCmdTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return inGameCmd_inGameCmdTypes_descriptor_;
}
bool inGameCmd_inGameCmdTypes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const inGameCmd_inGameCmdTypes inGameCmd::INGAME_NW_CMD_NONE;
const inGameCmd_inGameCmdTypes inGameCmd::INGAME_NW_CMD_PLAYER_RECONNECTED;
const inGameCmd_inGameCmdTypes inGameCmd::INGAME_NW_CMD_PLAYER_DISCONNECTED;
const inGameCmd_inGameCmdTypes inGameCmd::INGAME_NW_CMD_NEXT_TURN;
const inGameCmd_inGameCmdTypes inGameCmd::INGAME_NW_CMD_MOVE_UNIT;
const inGameCmd_inGameCmdTypes inGameCmd::INGAME_NW_CMD_ATTACK_UNIT;
const inGameCmd_inGameCmdTypes inGameCmd::INGAME_NW_CMD_PLACE_UNIT;
const inGameCmd_inGameCmdTypes inGameCmd::INGAME_NW_CMD_REMOVE_UNIT;
const inGameCmd_inGameCmdTypes inGameCmd::inGameCmdTypes_MIN;
const inGameCmd_inGameCmdTypes inGameCmd::inGameCmdTypes_MAX;
const int inGameCmd::inGameCmdTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int inGameCmd::kTypeFieldNumber;
const int inGameCmd::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

inGameCmd::inGameCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:inGameCmd)
}

void inGameCmd::InitAsDefaultInstance() {
}

inGameCmd::inGameCmd(const inGameCmd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:inGameCmd)
}

void inGameCmd::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

inGameCmd::~inGameCmd() {
  // @@protoc_insertion_point(destructor:inGameCmd)
  SharedDtor();
}

void inGameCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void inGameCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* inGameCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return inGameCmd_descriptor_;
}

const inGameCmd& inGameCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ntwrkCmd_2eproto();
  return *default_instance_;
}

inGameCmd* inGameCmd::default_instance_ = NULL;

inGameCmd* inGameCmd::New(::google::protobuf::Arena* arena) const {
  inGameCmd* n = new inGameCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void inGameCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:inGameCmd)
  type_ = 0u;
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool inGameCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:inGameCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 type = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_args;
        break;
      }

      // repeated fixed32 args = 2;
      case 2: {
        if (tag == 21) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_args())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:inGameCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:inGameCmd)
  return false;
#undef DO_
}

void inGameCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:inGameCmd)
  // required fixed32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->type(), output);
  }

  // repeated fixed32 args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->args(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:inGameCmd)
}

::google::protobuf::uint8* inGameCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:inGameCmd)
  // required fixed32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->type(), target);
  }

  // repeated fixed32 args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->args(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inGameCmd)
  return target;
}

int inGameCmd::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:inGameCmd)
  int total_size = 0;

  // required fixed32 type = 1 [default = 0];
  if (has_type()) {
    total_size += 1 + 4;
  }
  // repeated fixed32 args = 2;
  {
    int data_size = 0;
    data_size = 4 * this->args_size();
    total_size += 1 * this->args_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void inGameCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inGameCmd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const inGameCmd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const inGameCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inGameCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inGameCmd)
    MergeFrom(*source);
  }
}

void inGameCmd::MergeFrom(const inGameCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inGameCmd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void inGameCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inGameCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inGameCmd::CopyFrom(const inGameCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inGameCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inGameCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void inGameCmd::Swap(inGameCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void inGameCmd::InternalSwap(inGameCmd* other) {
  std::swap(type_, other->type_);
  args_.UnsafeArenaSwap(&other->args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata inGameCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = inGameCmd_descriptor_;
  metadata.reflection = inGameCmd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// inGameCmd

// required fixed32 type = 1 [default = 0];
bool inGameCmd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void inGameCmd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void inGameCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void inGameCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 inGameCmd::type() const {
  // @@protoc_insertion_point(field_get:inGameCmd.type)
  return type_;
}
 void inGameCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:inGameCmd.type)
}

// repeated fixed32 args = 2;
int inGameCmd::args_size() const {
  return args_.size();
}
void inGameCmd::clear_args() {
  args_.Clear();
}
 ::google::protobuf::uint32 inGameCmd::args(int index) const {
  // @@protoc_insertion_point(field_get:inGameCmd.args)
  return args_.Get(index);
}
 void inGameCmd::set_args(int index, ::google::protobuf::uint32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:inGameCmd.args)
}
 void inGameCmd::add_args(::google::protobuf::uint32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:inGameCmd.args)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
inGameCmd::args() const {
  // @@protoc_insertion_point(field_list:inGameCmd.args)
  return args_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
inGameCmd::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:inGameCmd.args)
  return &args_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
